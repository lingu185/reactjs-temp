{"ast":null,"code":"var _jsxFileName = \"D:\\\\reactjs_template\\\\reactjs_template\\\\src\\\\containers\\\\Chat\\\\components\\\\Chat.jsx\";\n\n/* eslint-disable react/no-array-index-key */\nimport React, { PureComponent } from 'react';\nimport Scrollbar from 'react-smooth-scrollbar';\nimport classNames from 'classnames';\nimport ChatContact from './ChatContact';\nimport ChatBubble from './ChatBubble';\nimport ChatSearch from './ChatSearch';\nimport ChatField from './ChatField';\nimport ChatTopbar from './ChatTopbar';\nimport { CurrentUserProps, ContactsProps } from '../../../shared/prop-types/ChatProps';\nexport default class Chat extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.onOpenChat = (contact, e) => {\n      const {\n        contacts\n      } = this.props;\n      e.preventDefault();\n      const dialog = contacts.find(c => c.userName === contact).messages;\n      const messages = dialog || null;\n      this.setState({\n        currentChat: contact,\n        currentMessages: messages\n      });\n    };\n\n    this.onOpenContacts = () => {\n      this.setState(prevState => ({\n        openContacts: !prevState.openContacts\n      }));\n    };\n\n    this.state = {\n      currentMessages: props.contacts[0].messages,\n      currentChat: props.contacts[0].userName,\n      openContacts: false\n    };\n  }\n\n  render() {\n    const {\n      openContacts,\n      currentChat,\n      currentMessages\n    } = this.state;\n    const {\n      currentUser,\n      contacts\n    } = this.props;\n    const chatClass = classNames({\n      chat: true,\n      'chat--open': openContacts\n    });\n    const contactsClass = classNames({\n      'chat__contact-list': true,\n      'chat__contact-list--open': openContacts\n    });\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: chatClass,\n      onClick: openContacts ? this.onOpenContacts : null,\n      role: \"presentation\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: contactsClass,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(ChatSearch, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"chat__contacts\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Scrollbar, {\n      className: \"scroll chat__contacts-scroll\",\n      alwaysShowTracks: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }\n    }, contacts.map((c, i) => /*#__PURE__*/React.createElement(\"button\", {\n      key: i,\n      type: \"button\",\n      onClick: e => this.onOpenChat(c.userName, e),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ChatContact, {\n      active: c.userName === currentChat,\n      contact: c,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 19\n      }\n    })))))), currentChat === null ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"chat__dialog\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(ChatTopbar, {\n      onClick: this.onOpenContacts,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"chat__dialog-select-message\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }\n    }, \"Select a chat to start messaging\"))) : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"chat__dialog\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(ChatTopbar, {\n      contact: contacts.find(c => c.userName === currentChat),\n      onClick: this.onOpenContacts,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(Scrollbar, {\n      className: \"scroll chat__scroll\",\n      alwaysShowTracks: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"chat__dialog-messages-wrap\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }\n    }, currentMessages === null || currentMessages.length === 0 ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"chat__dialog-messages\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"chat__dialog-messages-empty\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 27\n      }\n    }, \"No messages\"))) : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"chat__dialog-messages\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 23\n      }\n    }, currentMessages.map((m, i) => /*#__PURE__*/React.createElement(ChatBubble, {\n      key: i,\n      contact: m.userName === currentUser.userName ? currentUser : contacts.find(c => c.userName === m.userName),\n      message: m,\n      date: m,\n      active: m.userName === currentUser.userName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 27\n      }\n    }))))), /*#__PURE__*/React.createElement(ChatField, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 15\n      }\n    })));\n  }\n\n}\nChat.propTypes = {\n  currentUser: CurrentUserProps.isRequired,\n  contacts: ContactsProps.isRequired\n};","map":{"version":3,"sources":["D:/reactjs_template/reactjs_template/src/containers/Chat/components/Chat.jsx"],"names":["React","PureComponent","Scrollbar","classNames","ChatContact","ChatBubble","ChatSearch","ChatField","ChatTopbar","CurrentUserProps","ContactsProps","Chat","constructor","props","onOpenChat","contact","e","contacts","preventDefault","dialog","find","c","userName","messages","setState","currentChat","currentMessages","onOpenContacts","prevState","openContacts","state","render","currentUser","chatClass","chat","contactsClass","map","i","length","m","propTypes","isRequired"],"mappings":"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","sourcesContent":["/* eslint-disable react/no-array-index-key */\n\nimport React, { PureComponent } from 'react';\nimport Scrollbar from 'react-smooth-scrollbar';\nimport classNames from 'classnames';\nimport ChatContact from './ChatContact';\nimport ChatBubble from './ChatBubble';\nimport ChatSearch from './ChatSearch';\nimport ChatField from './ChatField';\nimport ChatTopbar from './ChatTopbar';\nimport { CurrentUserProps, ContactsProps } from '../../../shared/prop-types/ChatProps';\n\nexport default class Chat extends PureComponent {\n  static propTypes = {\n    currentUser: CurrentUserProps.isRequired,\n    contacts: ContactsProps.isRequired,\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentMessages: props.contacts[0].messages,\n      currentChat: props.contacts[0].userName,\n      openContacts: false,\n    };\n  }\n\n\n  onOpenChat = (contact, e) => {\n    const { contacts } = this.props;\n\n    e.preventDefault();\n    const dialog = contacts.find(c => c.userName === contact).messages;\n    const messages = dialog || null;\n    this.setState({\n      currentChat: contact,\n      currentMessages: messages,\n    });\n  };\n\n  onOpenContacts = () => {\n    this.setState(prevState => ({ openContacts: !prevState.openContacts }));\n  };\n\n  render() {\n    const { openContacts, currentChat, currentMessages } = this.state;\n\n    const { currentUser, contacts } = this.props;\n    const chatClass = classNames({\n      chat: true,\n      'chat--open': openContacts,\n    });\n\n    const contactsClass = classNames({\n      'chat__contact-list': true,\n      'chat__contact-list--open': openContacts,\n    });\n\n    return (\n      <div\n        className={chatClass}\n        onClick={openContacts ? this.onOpenContacts : null}\n        role=\"presentation\"\n      >\n        <div className={contactsClass}>\n          <ChatSearch />\n          <div className=\"chat__contacts\">\n            <Scrollbar className=\"scroll chat__contacts-scroll\" alwaysShowTracks>\n              {contacts.map((c, i) => (\n                <button key={i} type=\"button\" onClick={e => this.onOpenChat(c.userName, e)}>\n                  <ChatContact active={c.userName === currentChat} contact={c} />\n                </button>\n              ))}\n            </Scrollbar>\n          </div>\n        </div>\n        {currentChat === null\n          ? (\n            <div className=\"chat__dialog\">\n              <ChatTopbar onClick={this.onOpenContacts} />\n              <div className=\"chat__dialog-select-message\">\n                <p>Select a chat to start messaging</p>\n              </div>\n            </div>\n          )\n          : (\n            <div className=\"chat__dialog\">\n              <ChatTopbar\n                contact={contacts.find(c => c.userName === currentChat)}\n                onClick={this.onOpenContacts}\n              />\n              <Scrollbar className=\"scroll chat__scroll\" alwaysShowTracks>\n                <div className=\"chat__dialog-messages-wrap\">\n                  {currentMessages === null || currentMessages.length === 0\n                    ? (\n                      <div className=\"chat__dialog-messages\">\n                        <div className=\"chat__dialog-messages-empty\">\n                          <p>No messages</p>\n                        </div>\n                      </div>\n                    )\n                    : (\n                      <div className=\"chat__dialog-messages\">\n                        {currentMessages.map((m, i) => (\n                          <ChatBubble\n                            key={i}\n                            contact={m.userName === currentUser.userName ? currentUser\n                              : contacts.find(c => c.userName === m.userName)}\n                            message={m}\n                            date={m}\n                            active={m.userName === currentUser.userName}\n                          />\n                        ))}\n                      </div>\n                    )\n                }\n                </div>\n              </Scrollbar>\n              <ChatField />\n            </div>\n          )\n        }\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}