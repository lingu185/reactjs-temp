{"ast":null,"code":"var _jsxFileName = \"D:\\\\reactjs_template\\\\reactjs_template\\\\src\\\\containers\\\\Charts\\\\ChartJs\\\\components\\\\DynamiclyRefreshedDoughnut.jsx\";\nimport React, { PureComponent } from 'react';\nimport { Card, CardBody, Col } from 'reactstrap';\nimport { Doughnut } from 'react-chartjs-2';\nimport { withTranslation } from 'react-i18next';\nimport PropTypes from 'prop-types';\n\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nconst getState = () => ({\n  labels: ['Red', 'Blue', 'Yellow'],\n  datasets: [{\n    data: [getRandomInt(50, 200), getRandomInt(100, 150), getRandomInt(150, 250)],\n    backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56'],\n    hoverBackgroundColor: ['#FF6384', '#36A2EB', '#FFCE56'],\n    borderColor: 'rgba(255,255,255,0.54)'\n  }]\n});\n\nclass DynamiclyRefreshedDoughnut extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: getState(),\n      intervalId: null\n    };\n  }\n\n  componentWillMount() {\n    const intervalId = setInterval(() => {\n      this.setState({\n        data: getState()\n      });\n    }, 4000);\n    this.setState({\n      intervalId\n    });\n  }\n\n  componentWillUnmount() {\n    const {\n      intervalId\n    } = this.state;\n    clearInterval(intervalId);\n  }\n\n  render() {\n    const {\n      t\n    } = this.props;\n    const {\n      data\n    } = this.state;\n    return /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      lg: 12,\n      xl: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(CardBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card__title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h5\", {\n      className: \"bold-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 15\n      }\n    }, t('charts.react_chartjs.dynamicly_refreshed_doughnut'))), /*#__PURE__*/React.createElement(Doughnut, {\n      data: data,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }\n    }))));\n  }\n\n}\n\nDynamiclyRefreshedDoughnut.propTypes = {\n  t: PropTypes.func.isRequired\n};\nexport default withTranslation('common')(DynamiclyRefreshedDoughnut);","map":{"version":3,"sources":["D:/reactjs_template/reactjs_template/src/containers/Charts/ChartJs/components/DynamiclyRefreshedDoughnut.jsx"],"names":["React","PureComponent","Card","CardBody","Col","Doughnut","withTranslation","PropTypes","getRandomInt","min","max","Math","floor","random","getState","labels","datasets","data","backgroundColor","hoverBackgroundColor","borderColor","DynamiclyRefreshedDoughnut","constructor","props","state","intervalId","componentWillMount","setInterval","setState","componentWillUnmount","clearInterval","render","t","propTypes","func","isRequired"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,SAASC,IAAT,EAAeC,QAAf,EAAyBC,GAAzB,QAAoC,YAApC;AACA,SAASC,QAAT,QAAyB,iBAAzB;AACA,SAASC,eAAT,QAAgC,eAAhC;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,SAASC,YAAT,CAAsBC,GAAtB,EAA2BC,GAA3B,EAAgC;AAC9B,SAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAkBH,GAAG,GAAGD,GAAP,GAAc,CAA/B,CAAX,IAAgDA,GAAvD;AACD;;AAED,MAAMK,QAAQ,GAAG,OAAO;AACtBC,EAAAA,MAAM,EAAE,CACN,KADM,EAEN,MAFM,EAGN,QAHM,CADc;AAMtBC,EAAAA,QAAQ,EAAE,CAAC;AACTC,IAAAA,IAAI,EAAE,CAACT,YAAY,CAAC,EAAD,EAAK,GAAL,CAAb,EAAwBA,YAAY,CAAC,GAAD,EAAM,GAAN,CAApC,EAAgDA,YAAY,CAAC,GAAD,EAAM,GAAN,CAA5D,CADG;AAETU,IAAAA,eAAe,EAAE,CACf,SADe,EAEf,SAFe,EAGf,SAHe,CAFR;AAOTC,IAAAA,oBAAoB,EAAE,CACpB,SADoB,EAEpB,SAFoB,EAGpB,SAHoB,CAPb;AAYTC,IAAAA,WAAW,EAAE;AAZJ,GAAD;AANY,CAAP,CAAjB;;AAsBA,MAAMC,0BAAN,SAAyCpB,aAAzC,CAAuD;AAKrDqB,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXP,MAAAA,IAAI,EAAEH,QAAQ,EADH;AAEXW,MAAAA,UAAU,EAAE;AAFD,KAAb;AAID;;AAEDC,EAAAA,kBAAkB,GAAG;AACnB,UAAMD,UAAU,GAAGE,WAAW,CAAC,MAAM;AACnC,WAAKC,QAAL,CAAc;AAAEX,QAAAA,IAAI,EAAEH,QAAQ;AAAhB,OAAd;AACD,KAF6B,EAE3B,IAF2B,CAA9B;AAIA,SAAKc,QAAL,CAAc;AAAEH,MAAAA;AAAF,KAAd;AACD;;AAEDI,EAAAA,oBAAoB,GAAG;AACrB,UAAM;AAAEJ,MAAAA;AAAF,QAAiB,KAAKD,KAA5B;AACAM,IAAAA,aAAa,CAACL,UAAD,CAAb;AACD;;AAEDM,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA;AAAF,QAAQ,KAAKT,KAAnB;AACA,UAAM;AAAEN,MAAAA;AAAF,QAAW,KAAKO,KAAtB;AAEA,wBACE,oBAAC,GAAD;AAAK,MAAA,EAAE,EAAE,EAAT;AAAa,MAAA,EAAE,EAAE,EAAjB;AAAqB,MAAA,EAAE,EAAE,CAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAI,MAAA,SAAS,EAAC,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA2BQ,CAAC,CAAC,mDAAD,CAA5B,CADF,CADF,eAIE,oBAAC,QAAD;AAAU,MAAA,IAAI,EAAEf,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,CADF,CADF,CADF;AAYD;;AA1CoD;;AAAjDI,0B,CACGY,S,GAAY;AACjBD,EAAAA,CAAC,EAAEzB,SAAS,CAAC2B,IAAV,CAAeC;AADD,C;AA4CrB,eAAe7B,eAAe,CAAC,QAAD,CAAf,CAA0Be,0BAA1B,CAAf","sourcesContent":["import React, { PureComponent } from 'react';\nimport { Card, CardBody, Col } from 'reactstrap';\nimport { Doughnut } from 'react-chartjs-2';\nimport { withTranslation } from 'react-i18next';\nimport PropTypes from 'prop-types';\n\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * ((max - min) + 1)) + min;\n}\n\nconst getState = () => ({\n  labels: [\n    'Red',\n    'Blue',\n    'Yellow',\n  ],\n  datasets: [{\n    data: [getRandomInt(50, 200), getRandomInt(100, 150), getRandomInt(150, 250)],\n    backgroundColor: [\n      '#FF6384',\n      '#36A2EB',\n      '#FFCE56',\n    ],\n    hoverBackgroundColor: [\n      '#FF6384',\n      '#36A2EB',\n      '#FFCE56',\n    ],\n    borderColor: 'rgba(255,255,255,0.54)',\n  }],\n});\n\nclass DynamiclyRefreshedDoughnut extends PureComponent {\n  static propTypes = {\n    t: PropTypes.func.isRequired,\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: getState(),\n      intervalId: null,\n    };\n  }\n\n  componentWillMount() {\n    const intervalId = setInterval(() => {\n      this.setState({ data: getState() });\n    }, 4000);\n\n    this.setState({ intervalId });\n  }\n\n  componentWillUnmount() {\n    const { intervalId } = this.state;\n    clearInterval(intervalId);\n  }\n\n  render() {\n    const { t } = this.props;\n    const { data } = this.state;\n\n    return (\n      <Col md={12} lg={12} xl={6}>\n        <Card>\n          <CardBody>\n            <div className=\"card__title\">\n              <h5 className=\"bold-text\">{t('charts.react_chartjs.dynamicly_refreshed_doughnut')}</h5>\n            </div>\n            <Doughnut data={data} />\n          </CardBody>\n        </Card>\n      </Col>\n    );\n  }\n}\n\nexport default withTranslation('common')(DynamiclyRefreshedDoughnut);\n"]},"metadata":{},"sourceType":"module"}