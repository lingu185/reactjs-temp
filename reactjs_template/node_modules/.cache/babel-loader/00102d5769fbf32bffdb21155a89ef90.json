{"ast":null,"code":"var _jsxFileName = \"D:\\\\reactjs_template\\\\reactjs_template\\\\src\\\\containers\\\\Dashboards\\\\Default\\\\components\\\\ABTestingAnalytics.jsx\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport { withTranslation } from 'react-i18next';\nimport PropTypes from 'prop-types';\nimport Panel from '../../../../shared/components/Panel';\nimport getTooltipStyles from '../../../../shared/helpers';\nconst data = [{\n  name: 'Mon',\n  a: 590,\n  b: 1400\n}, {\n  name: 'Tue',\n  a: 868,\n  b: 1506\n}, {\n  name: 'Wed',\n  a: 1397,\n  b: 989\n}, {\n  name: 'Thu',\n  a: 1480,\n  b: 1228\n}, {\n  name: 'Fri',\n  a: 1520,\n  b: 1100\n}, {\n  name: 'Sat',\n  a: 1520,\n  b: 1100\n}, {\n  name: 'Sun',\n  a: 1400,\n  b: 1700\n}];\n\nconst ABTestingAnalytics = ({\n  t,\n  dir,\n  themeName\n}) => /*#__PURE__*/React.createElement(Panel, {\n  md: 12,\n  lg: 12,\n  xl: 12,\n  title: t('dashboard_default.ab_testing'),\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(\"div\", {\n  dir: \"ltr\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }\n}, /*#__PURE__*/React.createElement(ResponsiveContainer, {\n  height: 250,\n  className: \"dashboard__area\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 7\n  }\n}, /*#__PURE__*/React.createElement(AreaChart, {\n  data: data,\n  margin: {\n    top: 20,\n    left: -15,\n    bottom: 20\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 9\n  }\n}, /*#__PURE__*/React.createElement(XAxis, {\n  dataKey: \"name\",\n  tickLine: false,\n  reversed: dir === 'rtl',\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 11\n  }\n}), /*#__PURE__*/React.createElement(YAxis, {\n  tickLine: false,\n  orientation: dir === 'rtl' ? 'right' : 'left',\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 11\n  }\n}), /*#__PURE__*/React.createElement(Tooltip, Object.assign({}, getTooltipStyles(themeName, 'defaultItems'), {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 11\n  }\n})), /*#__PURE__*/React.createElement(Legend, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 11\n  }\n}), /*#__PURE__*/React.createElement(CartesianGrid, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 11\n  }\n}), /*#__PURE__*/React.createElement(Area, {\n  name: \"Site A\",\n  type: \"monotone\",\n  dataKey: \"a\",\n  fill: \"#4ce1b6\",\n  stroke: \"#4ce1b6\",\n  fillOpacity: 0.2,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 11\n  }\n}), /*#__PURE__*/React.createElement(Area, {\n  name: \"Site B\",\n  type: \"monotone\",\n  dataKey: \"b\",\n  fill: \"#70bbfd\",\n  stroke: \"#70bbfd\",\n  fillOpacity: 0.2,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 11\n  }\n})))));\n\nABTestingAnalytics.propTypes = {\n  t: PropTypes.func.isRequired,\n  dir: PropTypes.string.isRequired,\n  themeName: PropTypes.string.isRequired\n};\nexport default connect(state => ({\n  themeName: state.theme.className\n}))(withTranslation('common')(ABTestingAnalytics));","map":{"version":3,"sources":["D:/reactjs_template/reactjs_template/src/containers/Dashboards/Default/components/ABTestingAnalytics.jsx"],"names":["React","connect","AreaChart","Area","XAxis","YAxis","CartesianGrid","Tooltip","Legend","ResponsiveContainer","withTranslation","PropTypes","Panel","getTooltipStyles","data","name","a","b","ABTestingAnalytics","t","dir","themeName","top","left","bottom","propTypes","func","isRequired","string","state","theme","className"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SACEC,SADF,EACaC,IADb,EACmBC,KADnB,EAC0BC,KAD1B,EACiCC,aADjC,EACgDC,OADhD,EACyDC,MADzD,EACiEC,mBADjE,QAEO,UAFP;AAGA,SAASC,eAAT,QAAgC,eAAhC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,qCAAlB;AAEA,OAAOC,gBAAP,MAA6B,4BAA7B;AAEA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA,IAAI,EAAE,KAAR;AAAeC,EAAAA,CAAC,EAAE,GAAlB;AAAuBC,EAAAA,CAAC,EAAE;AAA1B,CAAD,EACX;AAAEF,EAAAA,IAAI,EAAE,KAAR;AAAeC,EAAAA,CAAC,EAAE,GAAlB;AAAuBC,EAAAA,CAAC,EAAE;AAA1B,CADW,EAEX;AAAEF,EAAAA,IAAI,EAAE,KAAR;AAAeC,EAAAA,CAAC,EAAE,IAAlB;AAAwBC,EAAAA,CAAC,EAAE;AAA3B,CAFW,EAGX;AAAEF,EAAAA,IAAI,EAAE,KAAR;AAAeC,EAAAA,CAAC,EAAE,IAAlB;AAAwBC,EAAAA,CAAC,EAAE;AAA3B,CAHW,EAIX;AAAEF,EAAAA,IAAI,EAAE,KAAR;AAAeC,EAAAA,CAAC,EAAE,IAAlB;AAAwBC,EAAAA,CAAC,EAAE;AAA3B,CAJW,EAKX;AAAEF,EAAAA,IAAI,EAAE,KAAR;AAAeC,EAAAA,CAAC,EAAE,IAAlB;AAAwBC,EAAAA,CAAC,EAAE;AAA3B,CALW,EAMX;AAAEF,EAAAA,IAAI,EAAE,KAAR;AAAeC,EAAAA,CAAC,EAAE,IAAlB;AAAwBC,EAAAA,CAAC,EAAE;AAA3B,CANW,CAAb;;AAQA,MAAMC,kBAAkB,GAAG,CAAC;AAAEC,EAAAA,CAAF;AAAKC,EAAAA,GAAL;AAAUC,EAAAA;AAAV,CAAD,kBACzB,oBAAC,KAAD;AAAO,EAAA,EAAE,EAAE,EAAX;AAAe,EAAA,EAAE,EAAE,EAAnB;AAAuB,EAAA,EAAE,EAAE,EAA3B;AAA+B,EAAA,KAAK,EAAEF,CAAC,CAAC,8BAAD,CAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACE;AAAK,EAAA,GAAG,EAAC,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACE,oBAAC,mBAAD;AAAqB,EAAA,MAAM,EAAE,GAA7B;AAAkC,EAAA,SAAS,EAAC,iBAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACE,oBAAC,SAAD;AAAW,EAAA,IAAI,EAAEL,IAAjB;AAAuB,EAAA,MAAM,EAAE;AAAEQ,IAAAA,GAAG,EAAE,EAAP;AAAWC,IAAAA,IAAI,EAAE,CAAC,EAAlB;AAAsBC,IAAAA,MAAM,EAAE;AAA9B,GAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBACE,oBAAC,KAAD;AAAO,EAAA,OAAO,EAAC,MAAf;AAAsB,EAAA,QAAQ,EAAE,KAAhC;AAAuC,EAAA,QAAQ,EAAEJ,GAAG,KAAK,KAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADF,eAEE,oBAAC,KAAD;AAAO,EAAA,QAAQ,EAAE,KAAjB;AAAwB,EAAA,WAAW,EAAEA,GAAG,KAAK,KAAR,GAAgB,OAAhB,GAA0B,MAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAFF,eAGE,oBAAC,OAAD,oBAAaP,gBAAgB,CAACQ,SAAD,EAAY,cAAZ,CAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAHF,eAIE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAJF,eAKE,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EALF,eAME,oBAAC,IAAD;AAAM,EAAA,IAAI,EAAC,QAAX;AAAoB,EAAA,IAAI,EAAC,UAAzB;AAAoC,EAAA,OAAO,EAAC,GAA5C;AAAgD,EAAA,IAAI,EAAC,SAArD;AAA+D,EAAA,MAAM,EAAC,SAAtE;AAAgF,EAAA,WAAW,EAAE,GAA7F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EANF,eAOE,oBAAC,IAAD;AAAM,EAAA,IAAI,EAAC,QAAX;AAAoB,EAAA,IAAI,EAAC,UAAzB;AAAoC,EAAA,OAAO,EAAC,GAA5C;AAAgD,EAAA,IAAI,EAAC,SAArD;AAA+D,EAAA,MAAM,EAAC,SAAtE;AAAgF,EAAA,WAAW,EAAE,GAA7F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAPF,CADF,CADF,CADF,CADF;;AAkBAH,kBAAkB,CAACO,SAAnB,GAA+B;AAC7BN,EAAAA,CAAC,EAAER,SAAS,CAACe,IAAV,CAAeC,UADW;AAE7BP,EAAAA,GAAG,EAAET,SAAS,CAACiB,MAAV,CAAiBD,UAFO;AAG7BN,EAAAA,SAAS,EAAEV,SAAS,CAACiB,MAAV,CAAiBD;AAHC,CAA/B;AAMA,eAAe1B,OAAO,CAAC4B,KAAK,KAAK;AAAER,EAAAA,SAAS,EAAEQ,KAAK,CAACC,KAAN,CAAYC;AAAzB,CAAL,CAAN,CAAP,CAAyDrB,eAAe,CAAC,QAAD,CAAf,CAA0BQ,kBAA1B,CAAzD,CAAf","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport {\n  AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer,\n} from 'recharts';\nimport { withTranslation } from 'react-i18next';\nimport PropTypes from 'prop-types';\nimport Panel from '../../../../shared/components/Panel';\n\nimport getTooltipStyles from '../../../../shared/helpers';\n\nconst data = [{ name: 'Mon', a: 590, b: 1400 },\n  { name: 'Tue', a: 868, b: 1506 },\n  { name: 'Wed', a: 1397, b: 989 },\n  { name: 'Thu', a: 1480, b: 1228 },\n  { name: 'Fri', a: 1520, b: 1100 },\n  { name: 'Sat', a: 1520, b: 1100 },\n  { name: 'Sun', a: 1400, b: 1700 }];\n\nconst ABTestingAnalytics = ({ t, dir, themeName }) => (\n  <Panel md={12} lg={12} xl={12} title={t('dashboard_default.ab_testing')}>\n    <div dir=\"ltr\">\n      <ResponsiveContainer height={250} className=\"dashboard__area\">\n        <AreaChart data={data} margin={{ top: 20, left: -15, bottom: 20 }}>\n          <XAxis dataKey=\"name\" tickLine={false} reversed={dir === 'rtl'} />\n          <YAxis tickLine={false} orientation={dir === 'rtl' ? 'right' : 'left'} />\n          <Tooltip {...getTooltipStyles(themeName, 'defaultItems')} />\n          <Legend />\n          <CartesianGrid />\n          <Area name=\"Site A\" type=\"monotone\" dataKey=\"a\" fill=\"#4ce1b6\" stroke=\"#4ce1b6\" fillOpacity={0.2} />\n          <Area name=\"Site B\" type=\"monotone\" dataKey=\"b\" fill=\"#70bbfd\" stroke=\"#70bbfd\" fillOpacity={0.2} />\n        </AreaChart>\n      </ResponsiveContainer>\n    </div>\n  </Panel>\n);\n\nABTestingAnalytics.propTypes = {\n  t: PropTypes.func.isRequired,\n  dir: PropTypes.string.isRequired,\n  themeName: PropTypes.string.isRequired,\n};\n\nexport default connect(state => ({ themeName: state.theme.className }))(withTranslation('common')(ABTestingAnalytics));\n"]},"metadata":{},"sourceType":"module"}