{"ast":null,"code":"var _jsxFileName = \"D:\\\\reactjs_template\\\\reactjs_template\\\\src\\\\shared\\\\components\\\\table\\\\EditableTable.jsx\";\n\n/* eslint-disable consistent-return */\nimport React, { PureComponent } from 'react';\nimport ReactDataGrid from 'react-data-grid';\nimport update from 'immutability-helper';\nimport PropTypes from 'prop-types';\nexport default class EditableTable extends PureComponent {\n  constructor(props, context) {\n    super(props, context);\n\n    this.handleGridRowsUpdated = ({\n      fromRow,\n      toRow,\n      updated\n    }) => {\n      let {\n        rows\n      } = this.state;\n      rows = rows.slice();\n\n      for (let i = fromRow; i <= toRow; i += 1) {\n        const rowToUpdate = rows[i];\n        rows[i] = update(rowToUpdate, {\n          $merge: updated\n        });\n      }\n\n      this.setState({\n        rows\n      });\n    };\n\n    this.handleGridSort = (sortColumn, sortDirection) => {\n      const comparer = (a, b) => {\n        if (sortDirection === 'ASC') {\n          return a[sortColumn] > b[sortColumn] ? 1 : -1;\n        }\n\n        if (sortDirection === 'DESC') {\n          return a[sortColumn] < b[sortColumn] ? 1 : -1;\n        }\n      };\n\n      const {\n        originalRows\n      } = this.state;\n      const sortRows = originalRows.slice(0);\n      const rows = sortDirection === 'NONE' ? originalRows.slice(0, 10) : sortRows.sort(comparer).slice(0, 10);\n      this.setState({\n        rows\n      });\n    };\n\n    this.rowGetter = i => {\n      const {\n        rows\n      } = this.state;\n      return rows[i];\n    };\n\n    const _originalRows = props.rows;\n\n    const _rows = _originalRows.slice(0, 10);\n\n    this.state = {\n      rows: _rows,\n      originalRows: _originalRows\n    };\n  }\n\n  render() {\n    const {\n      heads,\n      rows\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"table\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(ReactDataGrid, {\n      onGridSort: this.handleGridSort,\n      enableCellSelect: true,\n      columns: heads,\n      rowGetter: this.rowGetter,\n      rowsCount: rows.length,\n      onGridRowsUpdated: this.handleGridRowsUpdated,\n      rowHeight: 44,\n      minColumnWidth: 100,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\nEditableTable.propTypes = {\n  heads: PropTypes.arrayOf(PropTypes.shape({\n    key: PropTypes.string,\n    name: PropTypes.string,\n    editable: PropTypes.bool,\n    sortable: PropTypes.bool\n  })).isRequired,\n  rows: PropTypes.arrayOf(PropTypes.shape()).isRequired\n};","map":{"version":3,"sources":["D:/reactjs_template/reactjs_template/src/shared/components/table/EditableTable.jsx"],"names":["React","PureComponent","ReactDataGrid","update","PropTypes","EditableTable","constructor","props","context","handleGridRowsUpdated","fromRow","toRow","updated","rows","state","slice","i","rowToUpdate","$merge","setState","handleGridSort","sortColumn","sortDirection","comparer","a","b","originalRows","sortRows","sort","rowGetter","render","heads","length","propTypes","arrayOf","shape","key","string","name","editable","bool","sortable","isRequired"],"mappings":"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","sourcesContent":["/* eslint-disable consistent-return */\nimport React, { PureComponent } from 'react';\nimport ReactDataGrid from 'react-data-grid';\nimport update from 'immutability-helper';\nimport PropTypes from 'prop-types';\n\nexport default class EditableTable extends PureComponent {\n  static propTypes = {\n    heads: PropTypes.arrayOf(PropTypes.shape({\n      key: PropTypes.string,\n      name: PropTypes.string,\n      editable: PropTypes.bool,\n      sortable: PropTypes.bool,\n    })).isRequired,\n    rows: PropTypes.arrayOf(PropTypes.shape()).isRequired,\n  };\n\n  constructor(props, context) {\n    super(props, context);\n    const originalRows = props.rows;\n    const rows = originalRows.slice(0, 10);\n    this.state = { rows, originalRows };\n  }\n\n  handleGridRowsUpdated = ({ fromRow, toRow, updated }) => {\n    let { rows } = this.state;\n    rows = rows.slice();\n\n    for (let i = fromRow; i <= toRow; i += 1) {\n      const rowToUpdate = rows[i];\n      rows[i] = update(rowToUpdate, { $merge: updated });\n    }\n\n    this.setState({ rows });\n  };\n\n  handleGridSort = (sortColumn, sortDirection) => {\n    const comparer = (a, b) => {\n      if (sortDirection === 'ASC') {\n        return (a[sortColumn] > b[sortColumn]) ? 1 : -1;\n      } if (sortDirection === 'DESC') {\n        return (a[sortColumn] < b[sortColumn]) ? 1 : -1;\n      }\n    };\n\n    const { originalRows } = this.state;\n    const sortRows = originalRows.slice(0);\n    const rows = sortDirection === 'NONE' ? originalRows.slice(0, 10) : sortRows.sort(comparer).slice(0, 10);\n\n    this.setState({ rows });\n  };\n\n  rowGetter = (i) => {\n    const { rows } = this.state;\n    return rows[i];\n  };\n\n  render() {\n    const { heads, rows } = this.props;\n    return (\n      <div className=\"table\">\n        <ReactDataGrid\n          onGridSort={this.handleGridSort}\n          enableCellSelect\n          columns={heads}\n          rowGetter={this.rowGetter}\n          rowsCount={rows.length}\n          onGridRowsUpdated={this.handleGridRowsUpdated}\n          rowHeight={44}\n          minColumnWidth={100}\n        />\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}