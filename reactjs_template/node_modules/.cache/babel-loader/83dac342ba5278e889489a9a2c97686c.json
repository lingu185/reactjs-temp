{"ast":null,"code":"var _jsxFileName = \"D:\\\\reactjs_template\\\\reactjs_template\\\\src\\\\shared\\\\components\\\\form\\\\MultiSelect.jsx\";\nimport React, { PureComponent } from 'react';\nimport Select from 'react-select';\nimport PropTypes from 'prop-types';\n\nclass MultiSelectField extends PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    this.handleChange = value => {\n      const {\n        onChange\n      } = this.props;\n      onChange(value);\n    };\n  }\n\n  render() {\n    const {\n      value,\n      name,\n      placeholder,\n      options\n    } = this.props;\n    return /*#__PURE__*/React.createElement(Select, {\n      isMulti: true,\n      name: name,\n      value: value,\n      onChange: this.handleChange,\n      options: options,\n      clearable: false,\n      closeOnSelect: false,\n      removeSelected: false,\n      className: \"react-select\",\n      placeholder: placeholder,\n      classNamePrefix: \"react-select\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 7\n      }\n    });\n  }\n\n}\n\nMultiSelectField.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  placeholder: PropTypes.string,\n  options: PropTypes.arrayOf(PropTypes.shape({\n    value: PropTypes.string,\n    label: PropTypes.string\n  })),\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.shape({\n    value: PropTypes.string,\n    label: PropTypes.string\n  }))]).isRequired\n};\nMultiSelectField.defaultProps = {\n  placeholder: '',\n  options: []\n};\n\nconst renderMultiSelectField = props => {\n  const {\n    input,\n    meta,\n    options,\n    placeholder\n  } = props;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form__form-group-input-wrap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(MultiSelectField, Object.assign({}, input, {\n    options: options,\n    placeholder: placeholder,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  })), meta.touched && meta.error && /*#__PURE__*/React.createElement(\"span\", {\n    className: \"form__form-group-error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 38\n    }\n  }, meta.error));\n};\n\nrenderMultiSelectField.propTypes = {\n  input: PropTypes.shape({\n    onChange: PropTypes.func,\n    name: PropTypes.string\n  }).isRequired,\n  meta: PropTypes.shape({\n    touched: PropTypes.bool,\n    error: PropTypes.string\n  }),\n  options: PropTypes.arrayOf(PropTypes.shape({\n    value: PropTypes.string,\n    label: PropTypes.string\n  })),\n  placeholder: PropTypes.string\n};\nrenderMultiSelectField.defaultProps = {\n  meta: null,\n  options: [],\n  placeholder: ''\n};\nexport default renderMultiSelectField;","map":{"version":3,"sources":["D:/reactjs_template/reactjs_template/src/shared/components/form/MultiSelect.jsx"],"names":["React","PureComponent","Select","PropTypes","MultiSelectField","handleChange","value","onChange","props","render","name","placeholder","options","propTypes","func","isRequired","string","arrayOf","shape","label","oneOfType","defaultProps","renderMultiSelectField","input","meta","touched","error","bool"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport Select from 'react-select';\nimport PropTypes from 'prop-types';\n\nclass MultiSelectField extends PureComponent {\n  static propTypes = {\n    onChange: PropTypes.func.isRequired,\n    name: PropTypes.string.isRequired,\n    placeholder: PropTypes.string,\n    options: PropTypes.arrayOf(PropTypes.shape({\n      value: PropTypes.string,\n      label: PropTypes.string,\n    })),\n    value: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.arrayOf(PropTypes.shape({\n        value: PropTypes.string,\n        label: PropTypes.string,\n      })),\n    ]).isRequired,\n  };\n\n  static defaultProps = {\n    placeholder: '',\n    options: [],\n  };\n\n  handleChange = (value) => {\n    const { onChange } = this.props;\n    onChange(value);\n  };\n\n  render() {\n    const {\n      value, name, placeholder, options,\n    } = this.props;\n\n    return (\n      <Select\n        isMulti\n        name={name}\n        value={value}\n        onChange={this.handleChange}\n        options={options}\n        clearable={false}\n        closeOnSelect={false}\n        removeSelected={false}\n        className=\"react-select\"\n        placeholder={placeholder}\n        classNamePrefix=\"react-select\"\n      />\n    );\n  }\n}\n\nconst renderMultiSelectField = (props) => {\n  const {\n    input, meta, options, placeholder,\n  } = props;\n  return (\n    <div className=\"form__form-group-input-wrap\">\n      <MultiSelectField\n        {...input}\n        options={options}\n        placeholder={placeholder}\n      />\n      {meta.touched && meta.error && <span className=\"form__form-group-error\">{meta.error}</span>}\n    </div>\n  );\n};\n\nrenderMultiSelectField.propTypes = {\n  input: PropTypes.shape({\n    onChange: PropTypes.func,\n    name: PropTypes.string,\n  }).isRequired,\n  meta: PropTypes.shape({\n    touched: PropTypes.bool,\n    error: PropTypes.string,\n  }),\n  options: PropTypes.arrayOf(PropTypes.shape({\n    value: PropTypes.string,\n    label: PropTypes.string,\n  })),\n  placeholder: PropTypes.string,\n};\n\nrenderMultiSelectField.defaultProps = {\n  meta: null,\n  options: [],\n  placeholder: '',\n};\n\nexport default renderMultiSelectField;\n"]},"metadata":{},"sourceType":"module"}