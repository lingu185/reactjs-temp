{"ast":null,"code":"var _jsxFileName = \"D:\\\\reactjs_template\\\\reactjs_template\\\\src\\\\containers\\\\Charts\\\\ChartJs\\\\components\\\\RandomAnimatedLine.jsx\";\n\n/* eslint-disable no-underscore-dangle,react/no-did-mount-set-state */\nimport React, { PureComponent } from 'react';\nimport { Card, CardBody, Col } from 'reactstrap';\nimport { Line } from 'react-chartjs-2';\nimport { withTranslation } from 'react-i18next';\nimport PropTypes from 'prop-types';\nconst initialState = {\n  labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n  datasets: [{\n    label: 'My First Dataset',\n    fill: false,\n    lineTension: 0.3,\n    backgroundColor: '#36A2EB',\n    borderColor: '#36A2EB',\n    borderWidth: 2,\n    pointBackgroundColor: '#36A2EB',\n    pointHoverRadius: 3,\n    pointHoverBorderWidth: 1,\n    pointRadius: 1,\n    pointHitRadius: 10,\n    data: [65, 59, 80, 81, 56, 55, 40]\n  }, {\n    label: 'My Second Dataset',\n    fill: false,\n    lineTension: 0.3,\n    backgroundColor: '#FF6384',\n    borderColor: '#FF6384',\n    borderWidth: 2,\n    pointBackgroundColor: '#FF6384',\n    pointHoverRadius: 3,\n    pointHoverBorderWidth: 1,\n    pointRadius: 1,\n    pointHitRadius: 10,\n    data: [5, 7, 54, 32, 87, 45, 25]\n  }]\n};\nconst options = {\n  scales: {\n    xAxes: [{\n      gridLines: {\n        color: 'rgb(204, 204, 204)',\n        borderDash: [3, 3]\n      },\n      ticks: {\n        fontColor: 'rgb(204, 204, 204)'\n      }\n    }],\n    yAxes: [{\n      gridLines: {\n        color: 'rgb(204, 204, 204)',\n        borderDash: [3, 3]\n      },\n      ticks: {\n        fontColor: 'rgb(204, 204, 204)'\n      }\n    }]\n  }\n};\n\nclass RandomAnimatedLine extends PureComponent {\n  constructor() {\n    super();\n    this.state = {\n      data: initialState,\n      intervalId: null\n    };\n  }\n\n  componentDidMount() {\n    const _this = this;\n\n    const intervalId = setInterval(() => {\n      const oldDataSet = _this.state.data.datasets[0];\n      const newData = [];\n\n      for (let x = 0; x < _this.state.data.labels.length; x += 1) {\n        newData.push(Math.floor(Math.random() * 100));\n      }\n\n      const newDataSet = { ...oldDataSet\n      };\n      newDataSet.data = newData;\n      const oldDataSet2 = _this.state.data.datasets[1];\n      const newData2 = [];\n\n      for (let x = 0; x < _this.state.data.labels.length; x += 1) {\n        newData2.push(Math.floor(Math.random() * 100));\n      }\n\n      const newDataSet2 = { ...oldDataSet2\n      };\n      newDataSet2.data = newData2;\n      const newState = { ...initialState,\n        data: {\n          datasets: [newDataSet, newDataSet2],\n          labels: _this.state.data.labels\n        }\n      };\n\n      _this.setState(newState);\n    }, 4000);\n    this.setState({\n      intervalId\n    });\n  }\n\n  componentWillUnmount() {\n    const {\n      intervalId\n    } = this.state;\n    clearInterval(intervalId);\n  }\n\n  render() {\n    const {\n      t\n    } = this.props;\n    const {\n      data\n    } = this.state;\n    return /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      lg: 12,\n      xl: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(CardBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card__title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h5\", {\n      className: \"bold-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 15\n      }\n    }, t('charts.react_chartjs.random_animated_line'))), /*#__PURE__*/React.createElement(Line, {\n      data: data,\n      options: options,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 13\n      }\n    }))));\n  }\n\n}\n\nRandomAnimatedLine.propTypes = {\n  t: PropTypes.func.isRequired\n};\nexport default withTranslation('common')(RandomAnimatedLine);","map":{"version":3,"sources":["D:/reactjs_template/reactjs_template/src/containers/Charts/ChartJs/components/RandomAnimatedLine.jsx"],"names":["React","PureComponent","Card","CardBody","Col","Line","withTranslation","PropTypes","initialState","labels","datasets","label","fill","lineTension","backgroundColor","borderColor","borderWidth","pointBackgroundColor","pointHoverRadius","pointHoverBorderWidth","pointRadius","pointHitRadius","data","options","scales","xAxes","gridLines","color","borderDash","ticks","fontColor","yAxes","RandomAnimatedLine","constructor","state","intervalId","componentDidMount","_this","setInterval","oldDataSet","newData","x","length","push","Math","floor","random","newDataSet","oldDataSet2","newData2","newDataSet2","newState","setState","componentWillUnmount","clearInterval","render","t","props","propTypes","func","isRequired"],"mappings":"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","sourcesContent":["/* eslint-disable no-underscore-dangle,react/no-did-mount-set-state */\nimport React, { PureComponent } from 'react';\nimport { Card, CardBody, Col } from 'reactstrap';\nimport { Line } from 'react-chartjs-2';\nimport { withTranslation } from 'react-i18next';\nimport PropTypes from 'prop-types';\n\nconst initialState = {\n  labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n  datasets: [\n    {\n      label: 'My First Dataset',\n      fill: false,\n      lineTension: 0.3,\n      backgroundColor: '#36A2EB',\n      borderColor: '#36A2EB',\n      borderWidth: 2,\n      pointBackgroundColor: '#36A2EB',\n      pointHoverRadius: 3,\n      pointHoverBorderWidth: 1,\n      pointRadius: 1,\n      pointHitRadius: 10,\n      data: [65, 59, 80, 81, 56, 55, 40],\n    },\n    {\n      label: 'My Second Dataset',\n      fill: false,\n      lineTension: 0.3,\n      backgroundColor: '#FF6384',\n      borderColor: '#FF6384',\n      borderWidth: 2,\n      pointBackgroundColor: '#FF6384',\n      pointHoverRadius: 3,\n      pointHoverBorderWidth: 1,\n      pointRadius: 1,\n      pointHitRadius: 10,\n      data: [5, 7, 54, 32, 87, 45, 25],\n    },\n  ],\n};\n\nconst options = {\n  scales: {\n    xAxes: [\n      {\n        gridLines: {\n          color: 'rgb(204, 204, 204)',\n          borderDash: [3, 3],\n        },\n        ticks: {\n          fontColor: 'rgb(204, 204, 204)',\n        },\n      },\n    ],\n    yAxes: [\n      {\n        gridLines: {\n          color: 'rgb(204, 204, 204)',\n          borderDash: [3, 3],\n        },\n        ticks: {\n          fontColor: 'rgb(204, 204, 204)',\n        },\n      },\n    ],\n  },\n};\n\nclass RandomAnimatedLine extends PureComponent {\n  static propTypes = {\n    t: PropTypes.func.isRequired,\n  };\n\n  constructor() {\n    super();\n    this.state = {\n      data: initialState,\n      intervalId: null,\n    };\n  }\n\n  componentDidMount() {\n    const _this = this;\n\n    const intervalId = setInterval(() => {\n      const oldDataSet = _this.state.data.datasets[0];\n      const newData = [];\n\n      for (let x = 0; x < _this.state.data.labels.length; x += 1) {\n        newData.push(Math.floor(Math.random() * 100));\n      }\n\n      const newDataSet = {\n        ...oldDataSet,\n      };\n\n      newDataSet.data = newData;\n\n      const oldDataSet2 = _this.state.data.datasets[1];\n      const newData2 = [];\n\n      for (let x = 0; x < _this.state.data.labels.length; x += 1) {\n        newData2.push(Math.floor(Math.random() * 100));\n      }\n\n      const newDataSet2 = {\n        ...oldDataSet2,\n      };\n\n      newDataSet2.data = newData2;\n\n      const newState = {\n        ...initialState,\n        data: {\n          datasets: [newDataSet, newDataSet2],\n          labels: _this.state.data.labels,\n        },\n      };\n\n      _this.setState(newState);\n    }, 4000);\n\n    this.setState({ intervalId });\n  }\n\n  componentWillUnmount() {\n    const { intervalId } = this.state;\n    clearInterval(intervalId);\n  }\n\n  render() {\n    const { t } = this.props;\n    const { data } = this.state;\n\n    return (\n      <Col md={12} lg={12} xl={6}>\n        <Card>\n          <CardBody>\n            <div className=\"card__title\">\n              <h5 className=\"bold-text\">{t('charts.react_chartjs.random_animated_line')}</h5>\n            </div>\n            <Line data={data} options={options} />\n          </CardBody>\n        </Card>\n      </Col>\n    );\n  }\n}\n\nexport default withTranslation('common')(RandomAnimatedLine);\n"]},"metadata":{},"sourceType":"module"}