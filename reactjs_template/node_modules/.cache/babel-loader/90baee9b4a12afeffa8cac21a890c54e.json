{"ast":null,"code":"var _jsxFileName = \"D:\\\\reactjs_template\\\\reactjs_template\\\\src\\\\containers\\\\Tables\\\\EditableTable\\\\components\\\\EditableTable.jsx\";\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\nimport { Card, CardBody, Col } from 'reactstrap';\nimport { connect } from 'react-redux';\nimport EditTable from '../../../../shared/components/table/EditableTable';\nconst basicTheme = {\n  height: '100%',\n  width: '100%',\n  boxShadow: '0',\n  border: '1px solid'\n};\nconst blackTheme = { ...basicTheme,\n  background: '#2a2a31',\n  color: '#dddddd'\n};\n\nconst EditorInput = ({\n  value,\n  onChange,\n  onBlur,\n  themeName\n}) => /*#__PURE__*/React.createElement(\"input\", {\n  value: value,\n  style: themeName === 'theme-dark' ? blackTheme : basicTheme,\n  onChange: onChange,\n  onBlur: onBlur,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 3\n  }\n});\n\nEditorInput.propTypes = {\n  value: PropTypes.string.isRequired,\n  themeName: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  onBlur: PropTypes.func.isRequired\n};\nconst ConnectedEditorInput = connect(state => ({\n  themeName: state.theme.className\n}))(EditorInput);\n\nclass EditorTheme extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      value: null,\n      oldValue: null\n    };\n\n    this.handleChangeComplete = () => {\n      const {\n        onCommit\n      } = this.props;\n      onCommit();\n    };\n\n    this.handleInput = e => {\n      this.setState({\n        value: e.target.value\n      });\n    };\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.value !== state.oldValue) {\n      return {\n        value: props.value,\n        oldValue: props.value\n      };\n    }\n\n    return null;\n  }\n\n  getValue() {\n    const {\n      value\n    } = this.state;\n    const {\n      column\n    } = this.props;\n    return {\n      [column.key]: value\n    };\n  }\n\n  getInputNode() {\n    // eslint-disable-next-line react/no-find-dom-node\n    return ReactDOM.findDOMNode(this).getElementsByTagName('input')[0];\n  }\n\n  render() {\n    const {\n      value\n    } = this.state;\n    return /*#__PURE__*/React.createElement(ConnectedEditorInput, {\n      value: value,\n      onChange: this.handleInput,\n      onBlur: this.handleChangeComplete,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 7\n      }\n    });\n  }\n\n}\n\nEditorTheme.propTypes = {\n  onCommit: PropTypes.func.isRequired,\n  column: PropTypes.shape({\n    key: PropTypes.string.isRequired\n  }).isRequired\n};\nexport default class EditableTable extends PureComponent {\n  constructor() {\n    super();\n\n    this.getRandomDate = (start, end) => new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime())).toLocaleDateString();\n\n    this.createRows = numberOfRows => {\n      const rows = [];\n\n      for (let i = 1; i < numberOfRows + 1; i += 1) {\n        rows.push({\n          id: i,\n          first: ['Maria', 'Bobby  ', 'Alexander'][Math.floor(Math.random() * 3)],\n          last: ['Morisson', 'Brown  ', 'Medinberg'][Math.floor(Math.random() * 3)],\n          user: ['@dragon', '@hamster', '@cat'][Math.floor(Math.random() * 3)],\n          age: Math.min(100, Math.round(Math.random() * 30) + 20),\n          date: this.getRandomDate(new Date(2002, 3, 1), new Date(1954, 3, 1)),\n          location: ['Melbourne', 'Tokio', 'Moscow', 'Rome'][Math.floor(Math.random() * 4)],\n          work: ['Nova Soft', 'Dog Shop', 'Aspirity', 'Business Bro', 'Starlight'][Math.floor(Math.random() * 5)]\n        });\n      }\n\n      return rows;\n    };\n\n    this.heads = [{\n      key: 'id',\n      name: '#',\n      width: 80\n    }, {\n      key: 'first',\n      name: 'First Name',\n      editable: true,\n      editor: EditorTheme\n    }, {\n      key: 'last',\n      name: 'Last Name',\n      editable: true,\n      editor: EditorTheme\n    }, {\n      key: 'user',\n      name: 'Username',\n      editable: true,\n      editor: EditorTheme\n    }, {\n      key: 'age',\n      name: 'Age',\n      editable: true,\n      editor: EditorTheme\n    }, {\n      key: 'date',\n      name: 'Date',\n      editable: true,\n      editor: EditorTheme\n    }, {\n      key: 'location',\n      name: 'Location',\n      editable: true,\n      editor: EditorTheme\n    }, {\n      key: 'work',\n      name: 'Work',\n      editable: true,\n      editor: EditorTheme\n    }];\n    this.state = {\n      rows: this.createRows(10)\n    };\n  }\n\n  render() {\n    const {\n      rows\n    } = this.state;\n    return /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      lg: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(CardBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"card__title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h5\", {\n      className: \"bold-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 15\n      }\n    }, \"Editable table\"), /*#__PURE__*/React.createElement(\"h5\", {\n      className: \"subhead\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 15\n      }\n    }, \"Use table with \", 'column\\'s', \" option\", /*#__PURE__*/React.createElement(\"span\", {\n      className: \"red-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 17\n      }\n    }, \" editable\"))), /*#__PURE__*/React.createElement(EditTable, {\n      heads: this.heads,\n      rows: rows,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 13\n      }\n    }))));\n  }\n\n}","map":{"version":3,"sources":["D:/reactjs_template/reactjs_template/src/containers/Tables/EditableTable/components/EditableTable.jsx"],"names":["React","PureComponent","PropTypes","ReactDOM","Card","CardBody","Col","connect","EditTable","basicTheme","height","width","boxShadow","border","blackTheme","background","color","EditorInput","value","onChange","onBlur","themeName","propTypes","string","isRequired","func","ConnectedEditorInput","state","theme","className","EditorTheme","Component","oldValue","handleChangeComplete","onCommit","props","handleInput","e","setState","target","getDerivedStateFromProps","getValue","column","key","getInputNode","findDOMNode","getElementsByTagName","render","shape","EditableTable","constructor","getRandomDate","start","end","Date","getTime","Math","random","toLocaleDateString","createRows","numberOfRows","rows","i","push","id","first","floor","last","user","age","min","round","date","location","work","heads","name","editable","editor"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport ReactDOM from 'react-dom';\nimport { Card, CardBody, Col } from 'reactstrap';\nimport { connect } from 'react-redux';\nimport EditTable from '../../../../shared/components/table/EditableTable';\n\nconst basicTheme = {\n  height: '100%', width: '100%', boxShadow: '0', border: '1px solid',\n};\n\nconst blackTheme = {\n  ...basicTheme,\n  background: '#2a2a31',\n  color: '#dddddd',\n};\n\nconst EditorInput = ({\n  value, onChange, onBlur, themeName,\n}) => (\n  <input\n    value={value}\n    style={themeName === 'theme-dark' ? blackTheme : basicTheme}\n    onChange={onChange}\n    onBlur={onBlur}\n  />\n);\n\nEditorInput.propTypes = {\n  value: PropTypes.string.isRequired,\n  themeName: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  onBlur: PropTypes.func.isRequired,\n};\n\nconst ConnectedEditorInput = connect(state => ({ themeName: state.theme.className }))(EditorInput);\n\nclass EditorTheme extends React.Component {\n  static propTypes = {\n    onCommit: PropTypes.func.isRequired,\n    column: PropTypes.shape({\n      key: PropTypes.string.isRequired,\n    }).isRequired,\n  };\n\n  state = { value: null, oldValue: null };\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.value !== state.oldValue) {\n      return {\n        value: props.value,\n        oldValue: props.value,\n      };\n    }\n    return null;\n  }\n\n  getValue() {\n    const { value } = this.state;\n    const { column } = this.props;\n    return { [column.key]: value };\n  }\n\n  getInputNode() {\n    // eslint-disable-next-line react/no-find-dom-node\n    return ReactDOM.findDOMNode(this).getElementsByTagName('input')[0];\n  }\n\n  handleChangeComplete = () => {\n    const { onCommit } = this.props;\n    onCommit();\n  };\n\n  handleInput = (e) => {\n    this.setState({ value: e.target.value });\n  };\n\n\n  render() {\n    const { value } = this.state;\n    return (\n      <ConnectedEditorInput\n        value={value}\n        onChange={this.handleInput}\n        onBlur={this.handleChangeComplete}\n      />\n    );\n  }\n}\n\nexport default class EditableTable extends PureComponent {\n  constructor() {\n    super();\n    this.heads = [\n      {\n        key: 'id',\n        name: '#',\n        width: 80,\n      },\n      {\n        key: 'first',\n        name: 'First Name',\n        editable: true,\n        editor: EditorTheme,\n      },\n      {\n        key: 'last',\n        name: 'Last Name',\n        editable: true,\n        editor: EditorTheme,\n      },\n      {\n        key: 'user',\n        name: 'Username',\n        editable: true,\n        editor: EditorTheme,\n      },\n      {\n        key: 'age',\n        name: 'Age',\n        editable: true,\n        editor: EditorTheme,\n      },\n      {\n        key: 'date',\n        name: 'Date',\n        editable: true,\n        editor: EditorTheme,\n      },\n      {\n        key: 'location',\n        name: 'Location',\n        editable: true,\n        editor: EditorTheme,\n      },\n      {\n        key: 'work',\n        name: 'Work',\n        editable: true,\n        editor: EditorTheme,\n      },\n    ];\n\n    this.state = { rows: this.createRows(10) };\n  }\n\n  getRandomDate = (start, end) => new Date(start.getTime() + (Math.random() * (end.getTime()\n    - start.getTime()))).toLocaleDateString();\n\n  createRows = (numberOfRows) => {\n    const rows = [];\n    for (let i = 1; i < numberOfRows + 1; i += 1) {\n      rows.push({\n        id: i,\n        first: ['Maria', 'Bobby  ', 'Alexander'][Math.floor((Math.random() * 3))],\n        last: ['Morisson', 'Brown  ', 'Medinberg'][Math.floor((Math.random() * 3))],\n        user: ['@dragon', '@hamster', '@cat'][Math.floor((Math.random() * 3))],\n        age: Math.min(100, Math.round(Math.random() * 30) + 20),\n        date: this.getRandomDate(new Date(2002, 3, 1), new Date(1954, 3, 1)),\n        location: ['Melbourne', 'Tokio', 'Moscow', 'Rome'][Math.floor((Math.random() * 4))],\n        work: ['Nova Soft', 'Dog Shop', 'Aspirity', 'Business Bro', 'Starlight'][Math.floor((Math.random() * 5))],\n      });\n    }\n    return rows;\n  };\n\n  render() {\n    const { rows } = this.state;\n\n    return (\n      <Col md={12} lg={12}>\n        <Card>\n          <CardBody>\n            <div className=\"card__title\">\n              <h5 className=\"bold-text\">Editable table</h5>\n              <h5 className=\"subhead\">Use table with {'column\\'s'} option\n                <span className=\"red-text\"> editable</span>\n              </h5>\n            </div>\n            <EditTable heads={this.heads} rows={rows} />\n          </CardBody>\n        </Card>\n      </Col>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}